package main

import "fmt"

/* 数组的使用细节和注意事项
细节说明：
	1) 数组是多个相同类型数据的组合,一个数组一旦声明/定义了,其长度是固定的，不能动态变化。
	2) var arr []int 其中arr就是一个slice切片,其未声明数组长度
	3) 数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。
	4) 数组创建后，如果没有賦值，有默认值
		数值类型数组：默认值为0
		宇符串数组：默认值为
		bool数组：默认值为 false
	5) 使用数组的步骤 1.声明数组并开辟空间  2. 给数组各个元素赋值  3. 使用数组
	6) 数组的下标是从0开始的
	7) 数组下标必须在指定范围内使用，否则报panic：数组越界，比如 var arr [5]int 则有效下标为 0-4
	8) Go的数组属于值类型，在默认情况下是值传递，因此会进行值拷贝。数组间不会相互影响
	9) 如想在其它函数中，去修改原来的数组，可以使用引用传递(指针方式)
	10) **长度是数组的一部分，在传递函数参数时，需要考虑数组的长度
*/

//函数
func test01(arr1 [3]int) {
	arr1[0] = 88
}

//函数
func test02(arr2 *[3]int) {
	fmt.Printf("arr2指针的地址=%p\n", &arr2)
	(*arr2)[0] = 88
}

func main() {

	//数组创建后，如果没有赋值，有默认值(零值)
	//1. 数值(整数系列, 浮点数系列) =>0
	//2. 字符串 ==> ""
	//3. 布尔类型 ==> false

	var arr01 [3]float32
	var arr02 [3]string
	var arr03 [3]bool
	fmt.Printf(" arr01=%v\n arr02=%v\n arr03=%v\n", arr01, arr02, arr03)

	//数组的下标是从0开始的

	// var arr04 [3]string // 0 - 2
	// var index int = 3
	// arr04[index] = "tom" // 因为下标是 0 - 2 ,因此arr04[3]就越界

	//Go的数组属值类型， 在默认情况下是值传递， 因此会进行值拷贝。数组间不会相互影响
	arr1 := [3]int{11, 22, 33}
	test01(arr1)
	fmt.Println("main arr=", arr1)

	//如想在其它函数中，去修改原来的数组，可以使用引用传递(指针方式)
	arr2 := [3]int{11, 22, 33}
	fmt.Printf("arr2的地址=%p\n", &arr2)
	test02(&arr2)
	fmt.Println("main arr2=", arr2)
}
