package main

/* package介绍
包的介绍:
	在实际开发过程中，我们往往需要在不同文件中，去调用其他文件定义的函数，因此需要引入包。
包的本质:
	包的本质就是创建不同的文件夹，来存放程序文件
说明:
	go的每一个文件都属于一个包的，也就是说go以包的形势来管理文件和项目的目录结构
作用:
	1）区分相同名字的西数、变量等标识符
	2）当程序文件很多时，可以很好的管理项目
	3）控制函数、变量等访问范围，即作用域
包的相关说明
	＞打包基本语法
		package util
	＞引入包的基本语法
		import "包的路径"
包的细节说明：
	1） 在給一个文件打包时，该包对应一个文件夹，比如这里的utils 文件夫对应的包名就是utils,文件的包名通常和文件所在的文件夹名一致，一般为小写字母。
	2） 当一个文件要使用其它包函数或变量时，需要先引入对应的包
		a) 引入方式1：import "包名”
		b) 引入方式2：
			import "包名"
			import "包名"
	3） package指令在文件第一行，然后是import 指令
	4） 在import包时，路径从$GOPATH的src下开始，不用带src，編译器会自动从src下开始引入
	5） 为了让其它包的文件，可以访问到本包的函数，则该西数名的首字母需要大写，类似其它语言的public,这样才能跨包访问。比如 utils.go的
	6） 在访问其它包函数时，其语法是 包名.函数名，比如这里的main.go文件中
	7） 如果包名较长，Go支持给包取别名，注意細节：职别名后，原来的包名就不能使用了
		import (
			util "awesomeProject/src/103_go_code/3_method-function-package/a_function/utils"
			"fmt" )
	8） 在同一个包下，不能有相同的函数名、全局变量名，否则包重复定义
	9） 如果你要编译成一个可执行程序文件，就需要将这个包声明为 main，即package main.这个就是一个语法规范，如果你是写一个库，包名可以自定义
		说明
			(1） 演示一个案例，项目的目录如左边结构
			(2） 编译的指令，在项目目录下，编译路径不需要带src，编译器会自动带
			(3） 编译时需要编译main包所在的文件夹
			(4） 项目的目录结构最好按照规范来组织
			(5） 编译后生成一个有默认名的可执行文件，在$GOPATH目录下，可以指定名字和目录，比如：放在bin目录下：$GOPATH > go build  go_code/project/main
*/
