package main

import (
	"fmt"
)

/* 二维数组
快速入门案例：
请用二维数组输出如下图形
	000090
	001000
	020300
	000000
使用方式1：先声明/定义再赋值
1) 语法：var 数组名[大小][大小]类型
2) 比如：var arr [2J[3Jint[][]，再赋值。
3) 二维数组在内存的存在形式

使用方式2：直接初始化
1) 声明：var 数组名[大小][大小]类型 二[大小][大小]类型{{初值...},{初值...}}
2) 赋值(有默认值，比如int 类型的就是0）
3) 说明：二维数组在声明/定义时也对应有四种写法[和一维数组类似]
	var 数组名［大小][大小]类型 =［大小][大小]类型{{初值...},{初值...}}
	var 数组名［大小][大小]类型 = [...]][大小]类型{{初值...},{初值...}}
	var 数组名 =［大小][大小]类型{{初值...},{初值...}}
	var 数组名 = [...]][大小]类型{{初值...},{初值...}}
*/

func main() {
	//二维数组的演示案例
	/*
		0 0 0 0 0 0
		0 0 1 0 0 0
		0 2 0 3 0 0
		0 0 0 0 0 0
	*/

	// 使用方式1：先声明/定义再赋值
	var arr [4][6]int
	fmt.Println(arr)

	// 赋初值
	arr[1][2] = 1
	arr[2][1] = 2
	arr[2][3] = 3

	// 遍历二维数组，按照要求输出图形
	for i := 0; i < 4; i++ {
		for j := 0; j < 6; j++ {
			fmt.Print(arr[i][j], " ")
		}
		fmt.Println()
	}

	fmt.Println()

	var arr2 [2][3]int //以这个为例来分析arr2在内存的布局!!
	arr2[1][1] = 10
	fmt.Println(arr2)

	fmt.Printf("arr2[0]的地址%p\n", &arr2[0])
	fmt.Printf("arr2[1]的地址%p\n", &arr2[1])

	fmt.Printf("arr2[0][0]的地址%p\n", &arr2[0][0])
	fmt.Printf("arr2[1][0]的地址%p\n", &arr2[1][0])

	// 使用方式2：直接初始化
	fmt.Println()
	arr3 := [2][3]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println("arr3=", arr3)

}
